{"env_info": "sys.platform: linux\nPython: 3.7.9 | packaged by conda-forge | (default, Feb 13 2021, 20:03:11) [GCC 9.3.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.5, V11.5.50\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.0\nOpenCV: 4.6.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='open-mmlab://detectron2/resnet101_caffe')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/haihan/projects/mmlab/data/balloon/train/annotation_coco.json',\n        img_prefix='/home/haihan/projects/mmlab/data/balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/haihan/projects/mmlab/data/balloon/val/annotation_coco.json',\n        img_prefix='/home/haihan/projects/mmlab/data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/haihan/projects/mmlab/data/balloon/val/annotation_coco.json',\n        img_prefix='/home/haihan/projects/mmlab/data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/haihan/projects/mmlab/checkpoints/mask_rcnn_r101_caffe_fpn_1x_coco_20200601_095758-805e06c1.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('balloon', )\nwork_dir = './work_dirs/mmdet_haihan'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 949849872, "exp_name": "mmdet_haihan.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 6e-05, "bbox_mAP": 0.0142, "bbox_mAP_50": 0.0564, "bbox_mAP_75": 0.001, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0007, "bbox_mAP_l": 0.0218, "bbox_mAP_copypaste": "0.0142 0.0564 0.0010 0.0000 0.0007 0.0218", "segm_mAP": 0.0422, "segm_mAP_50": 0.0914, "segm_mAP_75": 0.0266, "segm_mAP_s": 0.0059, "segm_mAP_m": 0.0007, "segm_mAP_l": 0.0932, "segm_mAP_copypaste": "0.0422 0.0914 0.0266 0.0059 0.0007 0.0932"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00012, "bbox_mAP": 0.14, "bbox_mAP_50": 0.3235, "bbox_mAP_75": 0.0748, "bbox_mAP_s": 0.0078, "bbox_mAP_m": 0.0908, "bbox_mAP_l": 0.1803, "bbox_mAP_copypaste": "0.1400 0.3235 0.0748 0.0078 0.0908 0.1803", "segm_mAP": 0.2393, "segm_mAP_50": 0.3406, "segm_mAP_75": 0.3044, "segm_mAP_s": 0.0123, "segm_mAP_m": 0.0936, "segm_mAP_l": 0.3283, "segm_mAP_copypaste": "0.2393 0.3406 0.3044 0.0123 0.0936 0.3283"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00018, "bbox_mAP": 0.2298, "bbox_mAP_50": 0.4999, "bbox_mAP_75": 0.1517, "bbox_mAP_s": 0.0252, "bbox_mAP_m": 0.1198, "bbox_mAP_l": 0.2783, "bbox_mAP_copypaste": "0.2298 0.4999 0.1517 0.0252 0.1198 0.2783", "segm_mAP": 0.3571, "segm_mAP_50": 0.508, "segm_mAP_75": 0.4229, "segm_mAP_s": 0.0281, "segm_mAP_m": 0.1891, "segm_mAP_l": 0.4348, "segm_mAP_copypaste": "0.3571 0.5080 0.4229 0.0281 0.1891 0.4348"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00025, "bbox_mAP": 0.2126, "bbox_mAP_50": 0.5046, "bbox_mAP_75": 0.0482, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.205, "bbox_mAP_l": 0.242, "bbox_mAP_copypaste": "0.2126 0.5046 0.0482 0.0000 0.2050 0.2420", "segm_mAP": 0.3717, "segm_mAP_50": 0.5155, "segm_mAP_75": 0.4464, "segm_mAP_s": 0.0034, "segm_mAP_m": 0.2262, "segm_mAP_l": 0.4455, "segm_mAP_copypaste": "0.3717 0.5155 0.4464 0.0034 0.2262 0.4455"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00031, "bbox_mAP": 0.2771, "bbox_mAP_50": 0.5517, "bbox_mAP_75": 0.2082, "bbox_mAP_s": 0.0092, "bbox_mAP_m": 0.2628, "bbox_mAP_l": 0.3139, "bbox_mAP_copypaste": "0.2771 0.5517 0.2082 0.0092 0.2628 0.3139", "segm_mAP": 0.409, "segm_mAP_50": 0.5489, "segm_mAP_75": 0.4966, "segm_mAP_s": 0.0055, "segm_mAP_m": 0.2993, "segm_mAP_l": 0.4769, "segm_mAP_copypaste": "0.4090 0.5489 0.4966 0.0055 0.2993 0.4769"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00037, "bbox_mAP": 0.4596, "bbox_mAP_50": 0.6781, "bbox_mAP_75": 0.5216, "bbox_mAP_s": 0.0053, "bbox_mAP_m": 0.3903, "bbox_mAP_l": 0.5155, "bbox_mAP_copypaste": "0.4596 0.6781 0.5216 0.0053 0.3903 0.5155", "segm_mAP": 0.566, "segm_mAP_50": 0.6755, "segm_mAP_75": 0.6254, "segm_mAP_s": 0.0035, "segm_mAP_m": 0.4006, "segm_mAP_l": 0.6522, "segm_mAP_copypaste": "0.5660 0.6755 0.6254 0.0035 0.4006 0.6522"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00043, "bbox_mAP": 0.564, "bbox_mAP_50": 0.7345, "bbox_mAP_75": 0.6529, "bbox_mAP_s": 0.0063, "bbox_mAP_m": 0.4414, "bbox_mAP_l": 0.6259, "bbox_mAP_copypaste": "0.5640 0.7345 0.6529 0.0063 0.4414 0.6259", "segm_mAP": 0.6391, "segm_mAP_50": 0.7366, "segm_mAP_75": 0.7077, "segm_mAP_s": 0.0037, "segm_mAP_m": 0.4581, "segm_mAP_l": 0.7216, "segm_mAP_copypaste": "0.6391 0.7366 0.7077 0.0037 0.4581 0.7216"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00049, "bbox_mAP": 0.573, "bbox_mAP_50": 0.73, "bbox_mAP_75": 0.6406, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4646, "bbox_mAP_l": 0.6464, "bbox_mAP_copypaste": "0.5730 0.7300 0.6406 0.0000 0.4646 0.6464", "segm_mAP": 0.6455, "segm_mAP_50": 0.73, "segm_mAP_75": 0.7026, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4631, "segm_mAP_l": 0.7417, "segm_mAP_copypaste": "0.6455 0.7300 0.7026 0.0000 0.4631 0.7417"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 6e-05, "bbox_mAP": 0.5723, "bbox_mAP_50": 0.7574, "bbox_mAP_75": 0.651, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.493, "bbox_mAP_l": 0.6333, "bbox_mAP_copypaste": "0.5723 0.7574 0.6510 0.0000 0.4930 0.6333", "segm_mAP": 0.6617, "segm_mAP_50": 0.7574, "segm_mAP_75": 0.7178, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5105, "segm_mAP_l": 0.747, "segm_mAP_copypaste": "0.6617 0.7574 0.7178 0.0000 0.5105 0.7470"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 6e-05, "bbox_mAP": 0.5856, "bbox_mAP_50": 0.7581, "bbox_mAP_75": 0.6668, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4847, "bbox_mAP_l": 0.6505, "bbox_mAP_copypaste": "0.5856 0.7581 0.6668 0.0000 0.4847 0.6505", "segm_mAP": 0.6624, "segm_mAP_50": 0.7581, "segm_mAP_75": 0.7092, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5047, "segm_mAP_l": 0.7464, "segm_mAP_copypaste": "0.6624 0.7581 0.7092 0.0000 0.5047 0.7464"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 7e-05, "bbox_mAP": 0.5791, "bbox_mAP_50": 0.7499, "bbox_mAP_75": 0.6493, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4951, "bbox_mAP_l": 0.6412, "bbox_mAP_copypaste": "0.5791 0.7499 0.6493 0.0000 0.4951 0.6412", "segm_mAP": 0.6617, "segm_mAP_50": 0.7499, "segm_mAP_75": 0.7112, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5179, "segm_mAP_l": 0.7451, "segm_mAP_copypaste": "0.6617 0.7499 0.7112 0.0000 0.5179 0.7451"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.5778, "bbox_mAP_50": 0.7484, "bbox_mAP_75": 0.6478, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4857, "bbox_mAP_l": 0.6397, "bbox_mAP_copypaste": "0.5778 0.7484 0.6478 0.0000 0.4857 0.6397", "segm_mAP": 0.6635, "segm_mAP_50": 0.7484, "segm_mAP_75": 0.7096, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5079, "segm_mAP_l": 0.7472, "segm_mAP_copypaste": "0.6635 0.7484 0.7096 0.0000 0.5079 0.7472"}
